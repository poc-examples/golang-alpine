---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: validate-jwt
  labels:
    app.kubernetes.io/version: "4.0"
  annotations:
    tekton.dev/tags: security
    tekton.dev/categories: Security
    tekton.dev/displayName: "Scan an image for vulnerabilities with Red Hat Advanced Cluster Security"
    tekton.dev/platforms: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,darwin/amd64,darwin/arm64,windows/amd64"
    tekton.dev/pipelines.minVersion: "0.50.0"
spec:
  description: >-
    Needs Description
  params:
    - name: jwt_token
      type: string
      default: ""
  steps:
    - name: jwt-validation
      image: registry.access.redhat.com/ubi9/ubi:latest
      env:
        - name: HOME
          value: /tekton/home
        - name: JWT_TOKEN
          value: $(params.jwt_token)
        - name: AUTH_URL
          valueFrom:
            secretKeyRef:
              name: oidc-secret
              key: auth_url
        - name: CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: oidc-secret
              key: client-id
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: oidc-secret
              key: client-secret
      script: |
        #!/usr/bin/env python3

        import os
        import requests
        import base64

        jwt_token = os.getenv("JWT_TOKEN")
        if not jwt_token:
            print("JWT token is missing.")
            exit(1)

        auth_url = os.getenv("AUTH_URL")
        client_id = os.getenv("CLIENT_ID")
        client_secret = os.getenv("CLIENT_SECRET")

        try:
            response = requests.post(
                auth_url,
                headers={"Content-Type": "application/x-www-form-urlencoded"},
                data={
                    "client_id": client_id,
                    "client_secret": client_secret,
                    "token": jwt_token,
                },
            )
            response.raise_for_status()
        except requests.RequestException as e:
            print(f"HTTP request failed: {e}")
            exit(1)

        response_data = response.json()
        if response_data.get("active") is True:
            print("JWT token is valid.")
            exit(0)
        else:
            print("JWT token is invalid or expired.")
            exit(1)