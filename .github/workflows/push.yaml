name: Trigger on push

on:
  push:
    paths-ignore:
      - '.tekton/**'
      - 'pipelines/**'

jobs:
  run:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Call GitHub API
      #   env:
      #     TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     curl -X GET -H "Authorization: Bearer $TOKEN" https://api.github.com/repos/${{ github.repository }}

      - name: Retrieve OpenShift Login Token
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
          KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
          KEYCLOAK_ISSUER_URL: ${{ secrets.KEYCLOAK_ISSUER_URL }}
        run: |
          echo "Fetching device flow token from Keycloak..."

          # Step 1: Get a device code from Keycloak
          DEVICE_CODE_RESPONSE=$(curl -s -X POST "https://keycloak-keycloak.apps.quay-demo-2.ot31.p1.openshiftapps.com/protocol/openid-connect/auth/device" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=Ov23ligI7Qs9mfLN9wVu&client_secret=PI3QwsXuRQSQHyQCwKQIDCMox2oK0Tno&scope=openid offline_access" \
          )
          
          echo "Device Code Response: $DEVICE_CODE_RESPONSE"

          # DEVICE_CODE=$(echo "$DEVICE_CODE_RESPONSE" | jq -r '.device_code')
          # USER_CODE=$(echo "$DEVICE_CODE_RESPONSE" | jq -r '.user_code')
          # VERIFICATION_URI=$(echo "$DEVICE_CODE_RESPONSE" | jq -r '.verification_uri_complete')

          # echo "Open this URL to authenticate: $VERIFICATION_URI (User Code: $USER_CODE)"

          # # Step 2: Poll Keycloak for the token
          # ACCESS_TOKEN=""
          # while [[ -z "$ACCESS_TOKEN" ]]; do
          #   echo "Polling for token..."
          #   TOKEN_RESPONSE=$(curl -s -X POST "$KEYCLOAK_ISSUER_URL/protocol/openid-connect/token" \
          #     -H "Content-Type: application/x-www-form-urlencoded" \
          #     -d "grant_type=urn:ietf:params:oauth:grant-type:device_code" \
          #     -d "device_code=$DEVICE_CODE" \
          #     -d "client_id=$KEYCLOAK_CLIENT_ID" \
          #     -d "client_secret=$KEYCLOAK_CLIENT_SECRET" \
          #   )

          #   ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
          #   [[ -z "$ACCESS_TOKEN" ]] && sleep 5
          # done

          # echo "Access Token: $ACCESS_TOKEN"

      # - name: Auth OpenShift 
      #   env:
      #     TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      # - name: Authenticate with OpenShift
      #   env:
      #     OIDC_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     curl -v -X POST https://oauth-openshift.apps.quay-demo-2.ot31.p1.openshiftapps.com/oauth/token \
      #       -H "Content-Type: application/x-www-form-urlencoded" \
      #       -d "grant_type=device_code&code=$OIDC_TOKEN&client_id=Ov23ligI7Qs9mfLN9wVu&client_secret=40abf6bf33869ab319f768549aa2f5c74df50ef4"

      # - name: Get Auth JWT
      #   id: get-jwt
      #   env:
      #     AUTH_URL: ${{ secrets.AUTH_URL }}
      #     CLIENT_ID: ${{ secrets.CLIENT_ID }}
      #     CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      #   run: |
      #     RESPONSE=$(curl -s -X POST ${AUTH_URL} \
      #       -H "Content-Type: application/x-www-form-urlencoded" \
      #       -d "client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&grant_type=client_credentials")

      #     TOKEN=$(echo "${RESPONSE}" | jq -r '.access_token')
      #     echo "::set-output name=jwt_token::${TOKEN}"

      # - name: Trigger the Payload
      #   id: payload
      #   env:
      #     TEKTON_API_URL: ${{ secrets.TEKTON_API_URL }}
      #     JWT_TOKEN: ${{ steps.get-jwt.outputs.jwt_token }}
      #     WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      #     EVENT: '${{ toJson(github.event) }}'
      #   run: |
      #     curl -s -X POST ${WEBHOOK_URL} \
      #       -H "Content-Type: application/json" \
      #       -H "X-GitHub-Event: push" \
      #       -H "JWT-Token: $JWT_TOKEN" \
      #       -d "$EVENT"
 